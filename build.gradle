buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.bt.ppsr'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://collaborate.bt.com/artefacts/content/repositories/sqe-onevoice-releases" }
}


ext {
    springBootAdminVersion = '2.0.2'
    springCloudVersion = 'Finchley.SR1'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.0'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.0'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-web-services'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '1.2.7.RELEASE'
    compile 'com.oracle:ojdbc6:11.1.0.6.0'
    compile 'com.h2database:h2:1.4.197'
    compile 'io.springfox:springfox-swagger2:2.8.0'
    compile 'io.springfox:springfox-swagger-ui:2.8.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.5'
    compile 'com.google.guava:guava:16.0.1'
    compile("org.springframework.ws:spring-ws-core")
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework.ws', name: 'spring-ws-test', version: '2.0.3.RELEASE'
 }

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
    def webappDir = "$projectDir/src/main/webapp"
 /*   sourceSets {
        main {
            resources {
                srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources/static"]
            }
        }
    }*/


    processResources {
        dependsOn "buildAngular"
    }

    task buildAngular(type: Exec) {
        dependsOn "installAngular"
        workingDir "$webappDir"
        inputs.dir "$webappDir"
        group = BasePlugin.BUILD_GROUP

        if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
            commandLine "ng.cmd", "build","--prod"
        } else {
            commandLine "ng", "build","--prod"
        }


    }

    task installAngular(type: Exec) {
        workingDir "$webappDir"
        inputs.dir "$webappDir"
        group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
        if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
            commandLine "npm.cmd", "install"
        } else {
            commandLine "npm", "install"
        }
    }

